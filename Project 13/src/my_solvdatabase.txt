-- Create Database
CREATE DATABASE my_solvdatabase;
USE my_solvdatabase;

-- Create Tables
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    position VARCHAR(50),
    department_id INT
);

CREATE TABLE departments (
    id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE salaries (
    employee_id INT,
    salary DECIMAL(10, 2),
    FOREIGN KEY (employee_id) REFERENCES employees(id)
);

CREATE TABLE projects (
    employee_id INT,
    name VARCHAR(100),
    FOREIGN KEY (employee_id) REFERENCES employees(id)
);

-- Insertion Statements
INSERT INTO employees (id, name, position, department_id) VALUES (1, 'John Doe', 'Manager', 1);
INSERT INTO employees (id, name, position, department_id) VALUES (2, 'Jane Smith', 'Developer', 2);
INSERT INTO employees (id, name, position, department_id) VALUES (3, 'Emily Jones', 'Designer', 1);
INSERT INTO employees (id, name, position, department_id) VALUES (4, 'Michael Brown', 'Analyst', 3);
INSERT INTO employees (id, name, position, department_id) VALUES (5, 'Sarah Davis', 'Tester', 2);
INSERT INTO employees (id, name, position, department_id) VALUES (6, 'David Wilson', 'Developer', 2);
INSERT INTO employees (id, name, position, department_id) VALUES (7, 'Laura Garcia', 'Manager', 1);
INSERT INTO employees (id, name, position, department_id) VALUES (8, 'Robert Martinez', 'Analyst', 3);
INSERT INTO employees (id, name, position, department_id) VALUES (9, 'Sophia Anderson', 'Designer', 1);
INSERT INTO employees (id, name, position, department_id) VALUES (10, 'James Taylor', 'Tester', 2);

-- Updating Statements
UPDATE employees SET position = 'Lead Developer' WHERE id = 2;
UPDATE employees SET position = 'Senior Analyst' WHERE id = 4;
UPDATE employees SET position = 'Senior Tester' WHERE id = 5;
UPDATE employees SET position = 'Lead Designer' WHERE id = 3;
UPDATE employees SET position = 'Senior Manager' WHERE id = 1;
UPDATE employees SET position = 'Junior Developer' WHERE id = 6;
UPDATE employees SET position = 'Junior Analyst' WHERE id = 8;
UPDATE employees SET position = 'Senior Designer' WHERE id = 9;
UPDATE employees SET position = 'Lead Tester' WHERE id = 10;
UPDATE employees SET position = 'Project Manager' WHERE id = 7;

-- Deletion Statements
DELETE FROM projects WHERE employee_id = 10;
DELETE FROM salaries WHERE employee_id = 10;
DELETE FROM employees WHERE id = 10;
DELETE FROM projects WHERE employee_id = 9;
DELETE FROM salaries WHERE employee_id = 9;
DELETE FROM employees WHERE id = 9;
DELETE FROM projects WHERE employee_id = 8;
DELETE FROM salaries WHERE employee_id = 8;
DELETE FROM employees WHERE id = 8;
DELETE FROM projects WHERE employee_id = 7;
DELETE FROM salaries WHERE employee_id = 7;
DELETE FROM employees WHERE id = 7;
DELETE FROM projects WHERE employee_id = 6;
DELETE FROM salaries WHERE employee_id = 6;
DELETE FROM employees WHERE id = 6;
DELETE FROM projects WHERE employee_id = 5;
DELETE FROM salaries WHERE employee_id = 5;
DELETE FROM employees WHERE id = 5;
DELETE FROM projects WHERE employee_id = 4;
DELETE FROM salaries WHERE employee_id = 4;
DELETE FROM employees WHERE id = 4;
DELETE FROM projects WHERE employee_id = 3;
DELETE FROM salaries WHERE employee_id = 3;
DELETE FROM employees WHERE id = 3;
DELETE FROM projects WHERE employee_id = 2;
DELETE FROM salaries WHERE employee_id = 2;
DELETE FROM employees WHERE id = 2;
DELETE FROM projects WHERE employee_id = 1;
DELETE FROM salaries WHERE employee_id = 1;
DELETE FROM employees WHERE id = 1;

-- Alter Table Statements
ALTER TABLE employees ADD COLUMN contact_email VARCHAR(100);
ALTER TABLE employees ADD COLUMN phone VARCHAR(20);
ALTER TABLE employees DROP COLUMN phone;
ALTER TABLE employees MODIFY COLUMN contact_email VARCHAR(50);
ALTER TABLE employees RENAME COLUMN contact_email TO email;

-- Big Join Statement
SELECT e.*, d.name AS department_name, s.salary, p.name AS project_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.id
LEFT JOIN salaries s ON e.id = s.employee_id
LEFT JOIN projects p ON e.id = p.employee_id;

-- Join Statements
SELECT e.name, d.name AS department_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.id;

SELECT e.name, d.name AS department_name
FROM employees e
RIGHT JOIN departments d ON e.department_id = d.id;

SELECT e.name, p.name AS project_name
FROM employees e
INNER JOIN projects p ON e.id = p.employee_id;

-- Corrected FULL OUTER JOIN equivalent
SELECT COALESCE(e.name, 'No Employee') AS employee_name, s.salary
FROM employees e
LEFT JOIN salaries s ON e.id = s.employee_id
UNION
SELECT COALESCE(e.name, 'No Employee') AS employee_name, s.salary
FROM salaries s
LEFT JOIN employees e ON s.employee_id = e.id;

-- Aggregate Functions and Group By (Without Having)
SELECT department_id, COUNT(*) AS num_employees
FROM employees
GROUP BY department_id;

SELECT e.position, AVG(s.salary) AS average_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position;

SELECT e.department_id, SUM(s.salary) AS total_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.department_id;

SELECT e.position, MIN(s.salary) AS minimum_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position;

SELECT e.position, MAX(s.salary) AS maximum_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position;

SELECT department_id, COUNT(DISTINCT position) AS unique_positions
FROM employees
GROUP BY department_id;

SELECT department_id, COUNT(*) AS employee_count
FROM employees
GROUP BY department_id;

-- Aggregate Functions and Group By (With Having)
SELECT department_id, COUNT(*) AS num_employees
FROM employees
GROUP BY department_id
HAVING COUNT(*) > 5;

SELECT e.position, AVG(s.salary) AS average_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position
HAVING AVG(s.salary) > 50000;

SELECT e.department_id, SUM(s.salary) AS total_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.department_id
HAVING SUM(s.salary) > 200000;

SELECT e.position, MIN(s.salary) AS minimum_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position
HAVING MIN(s.salary) < 30000;

SELECT e.position, MAX(s.salary) AS maximum_salary
FROM employees e
JOIN salaries s ON e.id = s.employee_id
GROUP BY e.position
HAVING MAX(s.salary) > 100000;

SELECT department_id, COUNT(DISTINCT position) AS unique_positions
FROM employees
GROUP BY department_id
HAVING COUNT(DISTINCT position) > 3;

SELECT department_id, COUNT(*) AS employee_count
FROM employees
GROUP BY department_id
HAVING COUNT(*) BETWEEN 2 AND 10;